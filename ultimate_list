1. **Ponto 2D**  
   Implemente uma classe `Ponto` que represente coordenadas `(x, y)`. Inclua construtores, getters, setters e um método para calcular a distância até outro ponto.

2. **Retângulo**  
   Crie uma classe `Retangulo` com atributos largura e altura. Métodos para calcular área e perímetro, além de validar se é um quadrado.

3. **Circulo**  
   Classe `Circulo` com atributo raio. Métodos para calcular área e circunferência, usando constantes estáticas.

4. **Aluno**  
   Modele uma classe `Aluno` com nome, matrícula e três notas. Calcule a média e informe se está aprovado.

5. **Agenda Simples**  
   Classe `Contato` com nome e telefone. Gere uma lista de contatos em um vetor, com funções de adicionar, remover e buscar por nome.

6. **Carro**  
   Classe `Carro` com marca, modelo e ano. Adicione métodos para ligar/desligar e mostrar detalhes.

7. **Calculadora Básica**  
   Crie uma classe `Calculadora` com métodos estáticos de soma, subtração, multiplicação e divisão.

8. **Data**  
   Classe `Data` com dia, mês e ano. Método para avançar um dia, considerando meses e anos bissextos.

9. **Conta Bancária**  
   Classe `Conta` com número, titular e saldo. Métodos para depósito, saque e consulta de saldo (sem permitir saldo negativo).

10. **Livro**  
    Classe `Livro` com título, autor e ISBN. Implemente sobrecarga de `operator<<` para exibição.

11. **Ponto 3D**  
    Estenda `Ponto` para três dimensões. Sobrescreva o cálculo de distância.

12. **Veículo (abstração)**  
    Classe abstrata `Veiculo` com método virtual puro `mover()`. Crie subclasses `Carro` e `Bicicleta` implementando `mover()`.

13. **Empregado**  
    Classe `Empregado` com nome e salário. Método virtual `calcularPagamento()`, e duas subclasses: `Assalariado` e `Horista`.

14. **Animal / Polimorfismo**  
    Classe base `Animal` com método virtual `falar()`. Subclasses `Cachorro`, `Gato` e `Passaro` implementam sons específicos.

15. **Forma Geométrica (herança)**  
    Classe abstrata `Forma` com métodos virtuais `area()` e `perimetro()`. Subclasses `Retangulo`, `Circulo` e `Triangulo`.

16. **Estoque de Produtos**  
    Classe `Produto` com nome, código e quantidade. Gerencie estoque adicionando e removendo itens.

17. **Pedido de Venda**  
    Crie uma classe `ItemPedido` com produto e quantidade, e `Pedido` que acumula itens e calcula valor total.

18. **Matriz**  
    Classe `Matriz` 2×2 com sobrecarga de operadores `+`, `-` e `*`.

19. **Complexo**  
    Classe `NumeroComplexo` com parte real e imaginária. Sobrecarga de `+`, `-`, `*` e `==`.

20. **Pilha Genérica**  
    Implemente template `Pilha<T>` com push, pop e top usando vetor.

21. **Fila Genérica**  
    Template `Fila<T>` com enqueue, dequeue e front usando lista dinâmica.

22. **Contador Estático**  
    Classe `Contador` com atributo estático que conta quantas instâncias foram criadas.

23. **Ponto com Constantes**  
    Implemente `PontoConst` onde métodos que não modificam dados são `const`.

24. **Aluno com Encapsulamento**  
    Ajuste `Aluno` para ter atributos privados e métodos públicos de acesso.

25. **Time de Futebol**  
    Classe `Jogador` e `Time` que agrega jogadores. Métodos para adicionar e listar escalação.

26. **Relógio Digital**  
    Classe `Relogio` com horas, minutos e segundos. Método `tick()` que avança um segundo corretamente.

27. **Conta Poupança**  
    Estenda `Conta` com taxa de rendimento mensal e método para aplicar juros.

28. **Transação Bancária**  
    Classe `Transacao` para registrar data, tipo (depósito/saque) e valor. Associe a `Conta`.

29. **Funcionario com Bonus**  
    Classe `Funcionario` com método virtual `calcularBonus()`. Subclasses com bônus fixo ou percentual.

30. **Minha String**  
    Crie classe `MinhaString` que gerencie char* e implemente construtor, destrutor, cópia profunda e `operator=`.

31. **Inventário de Loja**  
    Classes `Produto` e `Loja`. A loja armazena produtos e imprime relatório de estoque.

32. **Sistema de Votação**  
    Classe `Candidato` e `Eleicao` que conta votos e aponta vencedor.

33. **Monitor de Temperatura**  
    Classe `Sensor` que gera leituras (números aleatórios). `Monitor` agrupa sensores e calcula média.

34. **Pizza Delivery**  
    Classe `Pizza` com sabores e preços. `PedidoPizza` monta pedido e calcula total.

35. **Biblioteca**  
    Classe `Livro` e `Biblioteca` que realiza empréstimos e devoluções, contando livros disponíveis.

36. **Aluno com Lista de Cursos**  
    `Aluno` armazena vetor de strings de cursos inscritos, com métodos de inscrição e cancelamento.

37. **Agenda Telefônica com Arquivo**  
    Grave e leia contatos em arquivo texto usando classes de fluxo (`fstream`).

38. **Validador de CPF**  
    Classe `CPF` com método para validar número de CPF (dígitos verificadores).

39. **Jogo da Velha**  
    Classe `JogoDaVelha` que gerencia tabuleiro 3×3, jogadas e determina vencedor.

40. **Quiz Simples**  
    Classe `Pergunta` com enunciado e resposta certa. `Quiz` apresenta perguntas e calcula acertos.

41. **Concessionária**  
    Classes `Veiculo`, `Carro` e `Moto`. `Concessionaria` exibe estoque filtrado por tipo.

42. **Controle de Estoque com Exceções**  
    Lance exceção se tentar remover mais itens do que em estoque.

43. **Caixa Eletrônico**  
    Classe `Caixa` que recebe valor e calcula quantidade de cédulas.

44. **Editor de Texto Básico**  
    Classe `Editor` com método para buscar e substituir palavras em string.

45. **Elevador**  
    Classe `Elevador` com andar atual, total de andares e métodos subir/descer com validação.

46. **Temporizador (Timer)**  
    Classe `Timer` que inicia, para e mostra duração em segundos (use `<chrono>`).

47. **Conta de Luz**  
    Classe `Fatura` com consumo em kWh e tarifa. Método para calcular valor e imposto.

48. **Processamento de Votos**  
    Use classes para ler votos de um arquivo e gerar estatísticas de participação.

49. **Conjunto (Set)**  
    Crie template `Conjunto<T>` com inserção, remoção e verificação de existência sem duplicatas.

50. **Mapa (Map)**  
    Implemente template `Mapa<K, V>` simples usando vetor de pares.

51. **Carro com Motor**  
    Classe `Motor` agregada dentro de `Carro`. `Motor` tem potência; `Carro` exibe desempenho.

52. **Jogador de Basquete**  
    Classe `Jogador` com pontos por partida. Calcule média de pontos.

53. **Fornecedor e Produto**  
    `Fornecedor` agrega vários `Produto`. Imprima lista de produtos de cada fornecedor.

54. **Gerador de Relatórios**  
    Classe abstrata `Relatorio` com método virtual `gerar()`. Subclasses geram relatórios em CSV ou JSON (simulado).

55. **Sistema de Tickets**  
    `Ticket` com prioridade; gerenciador retorna próximo ticket a ser atendido (fila de prioridade simples).

56. **Compra Online**  
    Classe `Carrinho` com métodos para adicionar, remover e finalizar compra com simulação de pagamento.

57. **Cadastro de Usuário**  
    Classe `Usuario` com username e senha; use hashing simples (função fictícia) para armazenar senha.

58. **Conjunto de Cursos**  
    Template `ConjuntoCursos<T>` que gerencia objetos curso, evitando duplicatas.

59. **Arquivo de Log**  
    Classe `Logger` que escreve mensagens em arquivo de log com timestamp.

60. **Registro de Temperatura**  
    `Registro` salva leituras de temperatura em vetor; métodos para maior, menor e média.

61. **Veículo Elétrico**  
    Subclasse `VeiculoEletrico` que herda de `Veiculo` e adiciona atributo `nivelBateria`.

62. **Sistema de Biblioteca com Herança**  
    Classes `Publicacao` abstrata; subclasses `Livro`, `Revista` e `Jornal` com comportamento específico.

63. **Conversor de Unidades**  
    Classe `Conversor` com métodos estáticos para converter metros/pés, Celsius/Fahrenheit etc.

64. **Agenda com Feriados**  
    `Evento` com data; `Agenda` filtra eventos que caem em fim de semana ou feriado predefinido.

65. **Processamento de Imagens (Simples)**  
    Classe `Imagem` que representa matriz de pixels em tons de cinza. Método para inverter cores.

66. **Bitwise Calculator**  
    Classe que realiza operações bit a bit (`AND`, `OR`, `XOR`, `NOT`) em inteiros.

67. **Jogo de Adivinhação**  
    Classe `Jogo` que gera número aleatório e dá dicas de maior/menor até o jogador acertar.

68. **Banco de Dados Simples**  
    `Registro` e `Tabela` que armazenam objetos em vetor e permitem busca por campo.

69. **Gerenciador de Tarefas**  
    Classe `Tarefa` com descrição e status; `Gerenciador` adiciona, conclui e lista tarefas pendentes.

70. **Validador de Email**  
    Método em classe `Email` que checa formato válido usando regras simples.

71. **Desenhando Formas no Console**  
    Imprima retângulos e triângulos usando asteriscos, a partir de classes que definem largura e altura.

72. **Contato com Histórico**  
    `Contato` guarda lista de chamadas (data e duração) e calcula tempo total de chamadas.

73. **Calculadora Científica**  
    Estenda `Calculadora` com métodos de potência, raiz quadrada e logaritmo (use `<cmath>`).

74. **Classe de Data Avançada**  
    Métodos para calcular diferença em dias entre duas datas.

75. **Cache de Objetos**  
    Classe `Cache<T>` que guarda até N objetos; ao exceder, remove o mais antigo (FIFO).

76. **Gerador de Senhas**  
    Classe que monta senhas aleatórias com letras, números e símbolos.

77. **Relógio Mundial**  
    Objetos `Relogio` para diferentes fusos horários; exiba horário local de cada um.

78. **Lista de Compras**  
    Classe `Item` e `ListaCompras` com métodos para agrupar por categoria e calcular total.

79. **Temporizador de Pomodoro**  
    Classe `Pomodoro` que alterna entre períodos de trabalho e descanso, contando ciclos.

80. **Extrator de Palavras**  
    Classe que recebe string e retorna lista de palavras únicas (sem repetição).

81. **Cliente e Pedido (herança múltipla)**  
    `Cliente` e `Fornecedor`; `UsuarioAvancado` herda de ambos, mantendo funcionalidades.

82. **Conjunto Social**  
    Classe `Usuario` que mantém lista de amigos (associação bidirecional).

83. **Sistema de Licitação**  
    `Licitacao` recebe propostas de diferentes participantes e escolhe maior lance.

84. **Monitor de Recursos**  
    Simule leitura de CPU e memória; classe `Monitor` armazena histórico e gera relatório.

85. **Análise de Texto**  
    Classe que conta linhas, palavras e caracteres de um texto lido de arquivo.

86. **Cache de Imagens**  
    Classe `CacheImagem` com limite de tamanho em MB; armazena objetos `Imagem` e remove LRU.

87. **Editor de Lista Encadeada**  
    Implemente lista encadeada genérica com inserção, remoção e busca.

88. **Biblioteca de Músicas**  
    Classes `Musica` e `Playlist`; métodos para criar, adicionar e reproduzir lista (simulado).

89. **Sensor de Movimento**  
    Classe `SensorMovimento` que detecta e registra eventos de movimento em vetor.

90. **Processador de Pedidos**  
    Pipeline de classes (`Recebedor`, `Validador`, `Processador`) que passam objeto `Pedido`.

91. **Jogo de Cartas**  
    Classes `Carta`, `Baralho` e `Jogador`. Embaralhe o baralho e distribua cartas.

92. **Sistema de Login**  
    Validação de usuário e senha, bloqueio após três tentativas falhas.

93. **Registro de Notas**  
    `Professor` e `Aluno`; professor atribui nota e aluno consulta histórico de notas.

94. **Conversor de Moedas**  
    Classe que converte valores entre moedas com taxas armazenadas em um mapa.

95. **Simulador de Lâmpada**  
    Classe `Lampada` com estados (`acesa`, `apagada` e `queimada`). Métodos para alternar e verificar estado.

96. **Chat Simples**  
    Objetos `Usuario` e `Mensagem`; `Chat` armazena mensagens em vetor e exibe histórico.

97. **Controle de Velocidade**  
    Classe `Veiculo` com velocidade máxima e atual; métodos para acelerar e frear com limites.

98. **Agendamento de Eventos**  
    `Evento` com data/hora; `Calendario` insere eventos e verifica conflitos de horário.

99. **Processamento de Formulário**  
    Classe `Formulario` coleta campos e valida entradas obrigatórias.

100. **Mini-Sistema de Funcionários**  
    Junção de `Funcionario`, `Departamento` e `Empresa`. Permite adicionar funcionários a departamentos e gerar relatório de custo salarial por departamento.
